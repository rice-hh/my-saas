<?xml version="1.0" encoding="UTF-8"?>
<!--
    日志级别从低到高：trace < debug < info < warn < error < fatal
    scan：设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod：设置监测配置文件是否有修改的时间间隔，若没有给出时间单位默认为毫秒。当scan为true时此属性生效，默认时间间隔为1分钟
    debug：设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false
-->
<configuration  scan="true" scanPeriod="10 seconds">
    <contextName>logback</contextName>
    <!--name是变量的名称，value是变量的值，通过定义的值会被插入到logger上下文中。可以使“${}”使用变量-->
    <!--日志存放的位置-->
    <property name="log_path" value="D:/Document/cache/logback" />
    <!--日志文件输出格式：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
    <property name="log_pattern" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{10} -> %msg%n" />
    <!--彩色日志-->
    <!--彩色日志依赖的渲染类-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!--彩色日志格式-->
    <property name="console_log_pattern" value="${console_log_pattern:-%clr(%d{yyyy-MM-dd HH:mm:ss}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <!--日志文件的编码-->
    <property name="log_charset" value="UTF-8" />
    <!--日志切割的最小单位-->
    <property name="file_size" value="100MB" />
    <!--日志总大小-->
    <property name="file_total_size" value="2GB" />
    <!--日志文件保留天数-->
    <property name="file_date" value="15" />

    <!--配置控制台输出-->
    <appender name="console_out" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <Pattern>${console_log_pattern}</Pattern>
            <charset>${log_charset}</charset>
        </encoder>
    </appender>

    <!--DEBUG级别日志(文件输出)-->
    <appender name="debug_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log_path}/debug.log</file>
        <!--输出格式-->
        <encoder>
            <pattern>${log_pattern}</pattern>
            <charset>${log_charset}</charset>
        </encoder>
        <!--日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--每天日志归档格式-->
            <fileNamePattern>${log_path}/debug/debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${file_size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>${file_date}</maxHistory>
            <!-- 总大小 -->
            <totalSizeCap>${file_total_size}</totalSizeCap>
        </rollingPolicy>
        <!--此日志文件只记录debug级别的-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--INFO级别日志(文件输出)-->
    <appender name="info_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log_path}/info.log</file>
        <!--输出格式-->
        <encoder>
            <pattern>${log_pattern}</pattern>
            <charset>${log_charset}</charset>
        </encoder>
        <!--日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--每天日志归档格式-->
            <fileNamePattern>${log_path}/info/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${file_size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>${file_date}</maxHistory>
            <!-- 总大小 -->
            <totalSizeCap>${file_total_size}</totalSizeCap>
        </rollingPolicy>
        <!--此日志文件只记录info级别的-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--WARN级别日志(文件输出)-->
    <appender name="warn_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log_path}/warn.log</file>
        <!--输出格式-->
        <encoder>
            <pattern>${log_pattern}</pattern>
            <charset>${log_charset}</charset>
        </encoder>
        <!--日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/warn/warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${file_size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>${file_date}</maxHistory>
            <!-- 总大小 -->
            <totalSizeCap>${file_total_size}</totalSizeCap>
        </rollingPolicy>
        <!--此日志文件只记录warn级别的-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--ERROR级别日志(文件输出)-->
    <appender name="error_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log_path}/error.log</file>
        <!--日志文件输出格式-->
        <encoder>
            <pattern>${log_pattern}</pattern>
            <charset>${log_charset}</charset>
        </encoder>
        <!--日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/error/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${file_size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>${file_date}</maxHistory>
        </rollingPolicy>
        <!--此日志文件只记录ERROR级别的-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
        <logger>：用来设置某一个包或者具体某一个类的日志打印级别、以及指定<appender>，有以下三个属性：
                  name：用来指定受此logger约束的某一个包或者具体的某一个类
                  level：用来设置打印级别，大小写无关，TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，
                         代表强制执行上级的级别，如果未设置此属性，那么当前logger将会继承上级的级别
                  addtivity：是否向上级logger传递打印信息，默认true
        参照：<logger name="org.springframework.web" level="info" />

        使用mybatis时，sql语句debug下才会打印，而这里只配置了info，所以想要查看sql语句的话，有以下两种操作：
            1）把<root level="info">改成<root level="DEBUG">，不过这样日志会出现很多其他消息
            2）单独给dao下目录配置debug模式，这样配置sql语句会打印，其他还是正常info级别

        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL，默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger
    -->

    <!--控制台打印sql-->
    <logger name="com.yl.saas.system.dao" level="debug" additivity="false">
        <appender-ref ref="console_out" />
    </logger>

    <root level="info">
        <appender-ref ref="console_out" />
        <appender-ref ref="debug_file" />
        <appender-ref ref="info_file" />
        <appender-ref ref="warn_file" />
        <appender-ref ref="error_file" />
    </root>

    <!--生产环境(文件输出)-->
    <!--<springProfile name="pro">
        <root level="info">
            <appender-ref ref="console_out" />
            <appender-ref ref="debug_file" />
            <appender-ref ref="info_file" />
            <appender-ref ref="warn_file" />
            <appender-ref ref="error_file" />
        </root>
    </springProfile>-->
</configuration>